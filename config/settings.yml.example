# $HeadURL: http://ambraproject.org/svn/plos/alm/head/config/settings.yml.example $
# $Id: settings.yml.example 5768 2010-12-13 23:44:28Z russ $
#
# Copyright (c) 2009-2010 by Public Library of Science, a non-profit corporation
# http://www.plos.org/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# COPY THIS FILE TO:
#   config/settings.yml
# AND EDIT 'REST_AUTH_SITE_KEY' BELOW. BE SURE TO BACK UP THIS FILE.
# (AS EXPLAINED BELOW, THIS FILE SHOULD NOT BE CHECKED INTO PUBLIC SOURCE 
# CONTROL.)

# A Site key gives additional protection against a dictionary attack if your DB
# is ever compromised.  With no site key, we store DB_password =
# hash(user_password, DB_user_salt) If your database were to be compromised
# you'd be vulnerable to a dictionary attack on all your stupid users'
# passwords.  With a site key, we store DB_password = hash(user_password,
# DB_user_salt, Code_site_key) That means an attacker needs access to both your
# site's code *and* its database to mount an "offline dictionary
# attack.":http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/web-authentication.html
# 
# It's probably of minor importance, but recommended by best practices:
# 'defense in depth'.  Needless to say, if you upload this to github or the
# youtubes or otherwise place it in public view you'll kinda defeat the point.
# Your users' passwords are still secure, and the world won't end, but
# defense_in_depth -= 1.
# 
# Please note: if you change this, all the passwords will be invalidated, so DO
# keep it someplace secure.  Use the random value given or type in the lyrics
# to your favorite Jay-Z song or something; any moderately long, unpredictable
# text.
  
# Repeated applications of the hash make brute force (even with a compromised
# database and site key) harder, and scale with Moore's law.
#
#   bq. "To squeeze the most security out of a limited-entropy password or
#   passphrase, we can use two techniques [salting and stretching]... that are
#   so simple and obvious that they should be used in every password system.
#   There is really no excuse not to use them." http://tinyurl.com/37lb73
#   Practical Security (Ferguson & Scheier) p350
# 
# A modest 10 foldings (the default here) adds 3ms.  This makes brute forcing
# 10 times harder, while reducing an app that otherwise serves 100 reqs/s to 78
# signin reqs/s, an app that does 10reqs/s to 9.7 reqs/s
# 
# More:
# * http://www.owasp.org/index.php/Hashing_Java
# * "An Illustrated Guide to Cryptographic Hashes":http://www.unixwiz.net/techtips/iguide-crypto-hashes.html

defaults: &defaults
  application: Article Level Metrics
  notification_email: alm@alm.example.org
  rest_auth_site_key: #'run `rake secret` to generate a key to insert here'
  rest_auth_digest_stretches: 10
  session_secret: #'run `rake secret` again to generate a second key to insert here'
  mas_app_id: # insert Microsoft Academic Search AppID
  twitter_key: # insert Twitter key
  twitter_secret: # insert Twitter secret
  layout: application

development:
  <<: *defaults
  hostname: http://dev.example.org 

test:
  <<: *defaults
  hostname: http://test.example.org 

stage:
  <<: *defaults
  hostname: http://stage.example.org 
  
production:
  <<: *defaults
  hostname: http://alm.example.org 
